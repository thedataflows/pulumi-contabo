// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package contabo

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Image struct {
	pulumi.CustomResourceState

	// The creation date of the image.
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// Description of the image.
	Description pulumi.StringOutput `pulumi:"description"`
	// If the image is in an error state (see status property), the error message can be seen in this field.
	ErrorMessage pulumi.StringOutput `pulumi:"errorMessage"`
	// Format of your image `iso` or `qcow`.
	Format pulumi.StringOutput `pulumi:"format"`
	// URL from which the image has been downloaded.
	ImageUrl pulumi.StringOutput `pulumi:"imageUrl"`
	// Time of the last update of the image.
	LastUpdated pulumi.StringOutput `pulumi:"lastUpdated"`
	// Name of the image.
	Name pulumi.StringOutput `pulumi:"name"`
	// Provided type of operating system (OS). Please specify Windows for MS `Windows` and `Linux` for other OS. Specifying
	// wrong OS type may lead to disfunctional cloud instance.
	OsType pulumi.StringOutput `pulumi:"osType"`
	// Flag indicating that the image is either a standard (true) or a custom image (false).
	StandardImage pulumi.BoolOutput `pulumi:"standardImage"`
	// Downloading status of the image (`downloading`, `downloaded` or `error`).
	Status pulumi.StringOutput `pulumi:"status"`
	// The size of the uploaded image in megabyte.
	UploadedSizeMb pulumi.IntOutput `pulumi:"uploadedSizeMb"`
	// Version number to distinguish the contents of an image e.g. the version of the operating system.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.ImageUrl == nil {
		return nil, errors.New("invalid value for required argument 'ImageUrl'")
	}
	if args.OsType == nil {
		return nil, errors.New("invalid value for required argument 'OsType'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource Image
	err := ctx.RegisterResource("contabo:index/image:image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("contabo:index/image:image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
	// The creation date of the image.
	CreationDate *string `pulumi:"creationDate"`
	// Description of the image.
	Description *string `pulumi:"description"`
	// If the image is in an error state (see status property), the error message can be seen in this field.
	ErrorMessage *string `pulumi:"errorMessage"`
	// Format of your image `iso` or `qcow`.
	Format *string `pulumi:"format"`
	// URL from which the image has been downloaded.
	ImageUrl *string `pulumi:"imageUrl"`
	// Time of the last update of the image.
	LastUpdated *string `pulumi:"lastUpdated"`
	// Name of the image.
	Name *string `pulumi:"name"`
	// Provided type of operating system (OS). Please specify Windows for MS `Windows` and `Linux` for other OS. Specifying
	// wrong OS type may lead to disfunctional cloud instance.
	OsType *string `pulumi:"osType"`
	// Flag indicating that the image is either a standard (true) or a custom image (false).
	StandardImage *bool `pulumi:"standardImage"`
	// Downloading status of the image (`downloading`, `downloaded` or `error`).
	Status *string `pulumi:"status"`
	// The size of the uploaded image in megabyte.
	UploadedSizeMb *int `pulumi:"uploadedSizeMb"`
	// Version number to distinguish the contents of an image e.g. the version of the operating system.
	Version *string `pulumi:"version"`
}

type ImageState struct {
	// The creation date of the image.
	CreationDate pulumi.StringPtrInput
	// Description of the image.
	Description pulumi.StringPtrInput
	// If the image is in an error state (see status property), the error message can be seen in this field.
	ErrorMessage pulumi.StringPtrInput
	// Format of your image `iso` or `qcow`.
	Format pulumi.StringPtrInput
	// URL from which the image has been downloaded.
	ImageUrl pulumi.StringPtrInput
	// Time of the last update of the image.
	LastUpdated pulumi.StringPtrInput
	// Name of the image.
	Name pulumi.StringPtrInput
	// Provided type of operating system (OS). Please specify Windows for MS `Windows` and `Linux` for other OS. Specifying
	// wrong OS type may lead to disfunctional cloud instance.
	OsType pulumi.StringPtrInput
	// Flag indicating that the image is either a standard (true) or a custom image (false).
	StandardImage pulumi.BoolPtrInput
	// Downloading status of the image (`downloading`, `downloaded` or `error`).
	Status pulumi.StringPtrInput
	// The size of the uploaded image in megabyte.
	UploadedSizeMb pulumi.IntPtrInput
	// Version number to distinguish the contents of an image e.g. the version of the operating system.
	Version pulumi.StringPtrInput
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	// Description of the image.
	Description string `pulumi:"description"`
	// URL from which the image has been downloaded.
	ImageUrl string `pulumi:"imageUrl"`
	// Name of the image.
	Name *string `pulumi:"name"`
	// Provided type of operating system (OS). Please specify Windows for MS `Windows` and `Linux` for other OS. Specifying
	// wrong OS type may lead to disfunctional cloud instance.
	OsType string `pulumi:"osType"`
	// Version number to distinguish the contents of an image e.g. the version of the operating system.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// Description of the image.
	Description pulumi.StringInput
	// URL from which the image has been downloaded.
	ImageUrl pulumi.StringInput
	// Name of the image.
	Name pulumi.StringPtrInput
	// Provided type of operating system (OS). Please specify Windows for MS `Windows` and `Linux` for other OS. Specifying
	// wrong OS type may lead to disfunctional cloud instance.
	OsType pulumi.StringInput
	// Version number to distinguish the contents of an image e.g. the version of the operating system.
	Version pulumi.StringInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//	ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

// ImageMapInput is an input type that accepts ImageMap and ImageMapOutput values.
// You can construct a concrete instance of `ImageMapInput` via:
//
//	ImageMap{ "key": ImageArgs{...} }
type ImageMapInput interface {
	pulumi.Input

	ToImageMapOutput() ImageMapOutput
	ToImageMapOutputWithContext(context.Context) ImageMapOutput
}

type ImageMap map[string]ImageInput

func (ImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (i ImageMap) ToImageMapOutput() ImageMapOutput {
	return i.ToImageMapOutputWithContext(context.Background())
}

func (i ImageMap) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageMapOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

// The creation date of the image.
func (o ImageOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

// Description of the image.
func (o ImageOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// If the image is in an error state (see status property), the error message can be seen in this field.
func (o ImageOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ErrorMessage }).(pulumi.StringOutput)
}

// Format of your image `iso` or `qcow`.
func (o ImageOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Format }).(pulumi.StringOutput)
}

// URL from which the image has been downloaded.
func (o ImageOutput) ImageUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ImageUrl }).(pulumi.StringOutput)
}

// Time of the last update of the image.
func (o ImageOutput) LastUpdated() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.LastUpdated }).(pulumi.StringOutput)
}

// Name of the image.
func (o ImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Provided type of operating system (OS). Please specify Windows for MS `Windows` and `Linux` for other OS. Specifying
// wrong OS type may lead to disfunctional cloud instance.
func (o ImageOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.OsType }).(pulumi.StringOutput)
}

// Flag indicating that the image is either a standard (true) or a custom image (false).
func (o ImageOutput) StandardImage() pulumi.BoolOutput {
	return o.ApplyT(func(v *Image) pulumi.BoolOutput { return v.StandardImage }).(pulumi.BoolOutput)
}

// Downloading status of the image (`downloading`, `downloaded` or `error`).
func (o ImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The size of the uploaded image in megabyte.
func (o ImageOutput) UploadedSizeMb() pulumi.IntOutput {
	return o.ApplyT(func(v *Image) pulumi.IntOutput { return v.UploadedSizeMb }).(pulumi.IntOutput)
}

// Version number to distinguish the contents of an image e.g. the version of the operating system.
func (o ImageOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Image {
		return vs[0].([]*Image)[vs[1].(int)]
	}).(ImageOutput)
}

type ImageMapOutput struct{ *pulumi.OutputState }

func (ImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (o ImageMapOutput) ToImageMapOutput() ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return o
}

func (o ImageMapOutput) MapIndex(k pulumi.StringInput) ImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Image {
		return vs[0].(map[string]*Image)[vs[1].(string)]
	}).(ImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), &Image{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageArrayInput)(nil)).Elem(), ImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageMapInput)(nil)).Elem(), ImageMap{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageMapOutput{})
}
