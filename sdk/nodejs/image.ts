// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'contabo:index/image:image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    /**
     * The creation date of the image.
     */
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    /**
     * Description of the image.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * If the image is in an error state (see status property), the error message can be seen in this field.
     */
    public /*out*/ readonly errorMessage!: pulumi.Output<string>;
    /**
     * Format of your image `iso` or `qcow`.
     */
    public /*out*/ readonly format!: pulumi.Output<string>;
    /**
     * URL from which the image has been downloaded.
     */
    public readonly imageUrl!: pulumi.Output<string>;
    /**
     * Time of the last update of the image.
     */
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * Name of the image.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Provided type of operating system (OS). Please specify Windows for MS `Windows` and `Linux` for other OS. Specifying
     * wrong OS type may lead to disfunctional cloud instance.
     */
    public readonly osType!: pulumi.Output<string>;
    /**
     * Flag indicating that the image is either a standard (true) or a custom image (false).
     */
    public /*out*/ readonly standardImage!: pulumi.Output<boolean>;
    /**
     * Downloading status of the image (`downloading`, `downloaded` or `error`).
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The size of the uploaded image in megabyte.
     */
    public /*out*/ readonly uploadedSizeMb!: pulumi.Output<number>;
    /**
     * Version number to distinguish the contents of an image e.g. the version of the operating system.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["imageUrl"] = state ? state.imageUrl : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["standardImage"] = state ? state.standardImage : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["uploadedSizeMb"] = state ? state.uploadedSizeMb : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.imageUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageUrl'");
            }
            if ((!args || args.osType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'osType'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["imageUrl"] = args ? args.imageUrl : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["errorMessage"] = undefined /*out*/;
            resourceInputs["format"] = undefined /*out*/;
            resourceInputs["lastUpdated"] = undefined /*out*/;
            resourceInputs["standardImage"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["uploadedSizeMb"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering image resources.
 */
export interface ImageState {
    /**
     * The creation date of the image.
     */
    creationDate?: pulumi.Input<string>;
    /**
     * Description of the image.
     */
    description?: pulumi.Input<string>;
    /**
     * If the image is in an error state (see status property), the error message can be seen in this field.
     */
    errorMessage?: pulumi.Input<string>;
    /**
     * Format of your image `iso` or `qcow`.
     */
    format?: pulumi.Input<string>;
    /**
     * URL from which the image has been downloaded.
     */
    imageUrl?: pulumi.Input<string>;
    /**
     * Time of the last update of the image.
     */
    lastUpdated?: pulumi.Input<string>;
    /**
     * Name of the image.
     */
    name?: pulumi.Input<string>;
    /**
     * Provided type of operating system (OS). Please specify Windows for MS `Windows` and `Linux` for other OS. Specifying
     * wrong OS type may lead to disfunctional cloud instance.
     */
    osType?: pulumi.Input<string>;
    /**
     * Flag indicating that the image is either a standard (true) or a custom image (false).
     */
    standardImage?: pulumi.Input<boolean>;
    /**
     * Downloading status of the image (`downloading`, `downloaded` or `error`).
     */
    status?: pulumi.Input<string>;
    /**
     * The size of the uploaded image in megabyte.
     */
    uploadedSizeMb?: pulumi.Input<number>;
    /**
     * Version number to distinguish the contents of an image e.g. the version of the operating system.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    /**
     * Description of the image.
     */
    description: pulumi.Input<string>;
    /**
     * URL from which the image has been downloaded.
     */
    imageUrl: pulumi.Input<string>;
    /**
     * Name of the image.
     */
    name?: pulumi.Input<string>;
    /**
     * Provided type of operating system (OS). Please specify Windows for MS `Windows` and `Linux` for other OS. Specifying
     * wrong OS type may lead to disfunctional cloud instance.
     */
    osType: pulumi.Input<string>;
    /**
     * Version number to distinguish the contents of an image e.g. the version of the operating system.
     */
    version: pulumi.Input<string>;
}
