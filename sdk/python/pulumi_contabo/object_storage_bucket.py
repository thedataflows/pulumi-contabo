# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['Object_storage_bucketArgs', 'Object_storage_bucket']

@pulumi.input_type
class Object_storage_bucketArgs:
    def __init__(__self__, *,
                 object_storage_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 public_sharing: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Object_storage_bucket resource.
        :param pulumi.Input[str] object_storage_id: The contabo objectStorageId on which the bucket should be created.
        :param pulumi.Input[str] name: The name of your bucket, consider the naming restriction
               https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-s3-bucket-naming-requirements.html.
        :param pulumi.Input[bool] public_sharing: Choose the access to your bucket. You can not share it at all or share it publicly.
        """
        pulumi.set(__self__, "object_storage_id", object_storage_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if public_sharing is not None:
            pulumi.set(__self__, "public_sharing", public_sharing)

    @property
    @pulumi.getter(name="objectStorageId")
    def object_storage_id(self) -> pulumi.Input[str]:
        """
        The contabo objectStorageId on which the bucket should be created.
        """
        return pulumi.get(self, "object_storage_id")

    @object_storage_id.setter
    def object_storage_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_storage_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of your bucket, consider the naming restriction
        https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-s3-bucket-naming-requirements.html.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicSharing")
    def public_sharing(self) -> Optional[pulumi.Input[bool]]:
        """
        Choose the access to your bucket. You can not share it at all or share it publicly.
        """
        return pulumi.get(self, "public_sharing")

    @public_sharing.setter
    def public_sharing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_sharing", value)


@pulumi.input_type
class _Object_storage_bucketState:
    def __init__(__self__, *,
                 creation_date: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_storage_id: Optional[pulumi.Input[str]] = None,
                 public_sharing: Optional[pulumi.Input[bool]] = None,
                 public_sharing_link: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Object_storage_bucket resources.
        :param pulumi.Input[str] creation_date: The creation date of the bucket.
        :param pulumi.Input[str] name: The name of your bucket, consider the naming restriction
               https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-s3-bucket-naming-requirements.html.
        :param pulumi.Input[str] object_storage_id: The contabo objectStorageId on which the bucket should be created.
        :param pulumi.Input[bool] public_sharing: Choose the access to your bucket. You can not share it at all or share it publicly.
        :param pulumi.Input[str] public_sharing_link: If your bucket is publicly shared, you can access it with this link.
        """
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_storage_id is not None:
            pulumi.set(__self__, "object_storage_id", object_storage_id)
        if public_sharing is not None:
            pulumi.set(__self__, "public_sharing", public_sharing)
        if public_sharing_link is not None:
            pulumi.set(__self__, "public_sharing_link", public_sharing_link)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[str]]:
        """
        The creation date of the bucket.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_date", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of your bucket, consider the naming restriction
        https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-s3-bucket-naming-requirements.html.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectStorageId")
    def object_storage_id(self) -> Optional[pulumi.Input[str]]:
        """
        The contabo objectStorageId on which the bucket should be created.
        """
        return pulumi.get(self, "object_storage_id")

    @object_storage_id.setter
    def object_storage_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_storage_id", value)

    @property
    @pulumi.getter(name="publicSharing")
    def public_sharing(self) -> Optional[pulumi.Input[bool]]:
        """
        Choose the access to your bucket. You can not share it at all or share it publicly.
        """
        return pulumi.get(self, "public_sharing")

    @public_sharing.setter
    def public_sharing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public_sharing", value)

    @property
    @pulumi.getter(name="publicSharingLink")
    def public_sharing_link(self) -> Optional[pulumi.Input[str]]:
        """
        If your bucket is publicly shared, you can access it with this link.
        """
        return pulumi.get(self, "public_sharing_link")

    @public_sharing_link.setter
    def public_sharing_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_sharing_link", value)


class Object_storage_bucket(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_storage_id: Optional[pulumi.Input[str]] = None,
                 public_sharing: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a Object_storage_bucket resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of your bucket, consider the naming restriction
               https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-s3-bucket-naming-requirements.html.
        :param pulumi.Input[str] object_storage_id: The contabo objectStorageId on which the bucket should be created.
        :param pulumi.Input[bool] public_sharing: Choose the access to your bucket. You can not share it at all or share it publicly.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Object_storage_bucketArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Object_storage_bucket resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param Object_storage_bucketArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Object_storage_bucketArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_storage_id: Optional[pulumi.Input[str]] = None,
                 public_sharing: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Object_storage_bucketArgs.__new__(Object_storage_bucketArgs)

            __props__.__dict__["name"] = name
            if object_storage_id is None and not opts.urn:
                raise TypeError("Missing required property 'object_storage_id'")
            __props__.__dict__["object_storage_id"] = object_storage_id
            __props__.__dict__["public_sharing"] = public_sharing
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["public_sharing_link"] = None
        super(Object_storage_bucket, __self__).__init__(
            'contabo:index/object_storage_bucket:object_storage_bucket',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            creation_date: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            object_storage_id: Optional[pulumi.Input[str]] = None,
            public_sharing: Optional[pulumi.Input[bool]] = None,
            public_sharing_link: Optional[pulumi.Input[str]] = None) -> 'Object_storage_bucket':
        """
        Get an existing Object_storage_bucket resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] creation_date: The creation date of the bucket.
        :param pulumi.Input[str] name: The name of your bucket, consider the naming restriction
               https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-s3-bucket-naming-requirements.html.
        :param pulumi.Input[str] object_storage_id: The contabo objectStorageId on which the bucket should be created.
        :param pulumi.Input[bool] public_sharing: Choose the access to your bucket. You can not share it at all or share it publicly.
        :param pulumi.Input[str] public_sharing_link: If your bucket is publicly shared, you can access it with this link.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Object_storage_bucketState.__new__(_Object_storage_bucketState)

        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["name"] = name
        __props__.__dict__["object_storage_id"] = object_storage_id
        __props__.__dict__["public_sharing"] = public_sharing
        __props__.__dict__["public_sharing_link"] = public_sharing_link
        return Object_storage_bucket(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[str]:
        """
        The creation date of the bucket.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of your bucket, consider the naming restriction
        https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-s3-bucket-naming-requirements.html.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStorageId")
    def object_storage_id(self) -> pulumi.Output[str]:
        """
        The contabo objectStorageId on which the bucket should be created.
        """
        return pulumi.get(self, "object_storage_id")

    @property
    @pulumi.getter(name="publicSharing")
    def public_sharing(self) -> pulumi.Output[Optional[bool]]:
        """
        Choose the access to your bucket. You can not share it at all or share it publicly.
        """
        return pulumi.get(self, "public_sharing")

    @property
    @pulumi.getter(name="publicSharingLink")
    def public_sharing_link(self) -> pulumi.Output[str]:
        """
        If your bucket is publicly shared, you can access it with this link.
        """
        return pulumi.get(self, "public_sharing_link")

