# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ImageArgs', 'Image']

@pulumi.input_type
class ImageArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 image_url: pulumi.Input[str],
                 os_type: pulumi.Input[str],
                 version: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Image resource.
        :param pulumi.Input[str] description: Description of the image.
        :param pulumi.Input[str] image_url: URL from which the image has been downloaded.
        :param pulumi.Input[str] os_type: Provided type of operating system (OS). Please specify Windows for MS `Windows` and `Linux` for other OS. Specifying
               wrong OS type may lead to disfunctional cloud instance.
        :param pulumi.Input[str] version: Version number to distinguish the contents of an image e.g. the version of the operating system.
        :param pulumi.Input[str] name: Name of the image.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "image_url", image_url)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "version", version)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        Description of the image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> pulumi.Input[str]:
        """
        URL from which the image has been downloaded.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Input[str]:
        """
        Provided type of operating system (OS). Please specify Windows for MS `Windows` and `Linux` for other OS. Specifying
        wrong OS type may lead to disfunctional cloud instance.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        Version number to distinguish the contents of an image e.g. the version of the operating system.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the image.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ImageState:
    def __init__(__self__, *,
                 creation_date: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 error_message: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 last_updated: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 standard_image: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 uploaded_size_mb: Optional[pulumi.Input[int]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Image resources.
        :param pulumi.Input[str] creation_date: The creation date of the image.
        :param pulumi.Input[str] description: Description of the image.
        :param pulumi.Input[str] error_message: If the image is in an error state (see status property), the error message can be seen in this field.
        :param pulumi.Input[str] format: Format of your image `iso` or `qcow`.
        :param pulumi.Input[str] image_url: URL from which the image has been downloaded.
        :param pulumi.Input[str] last_updated: Time of the last update of the image.
        :param pulumi.Input[str] name: Name of the image.
        :param pulumi.Input[str] os_type: Provided type of operating system (OS). Please specify Windows for MS `Windows` and `Linux` for other OS. Specifying
               wrong OS type may lead to disfunctional cloud instance.
        :param pulumi.Input[bool] standard_image: Flag indicating that the image is either a standard (true) or a custom image (false).
        :param pulumi.Input[str] status: Downloading status of the image (`downloading`, `downloaded` or `error`).
        :param pulumi.Input[int] uploaded_size_mb: The size of the uploaded image in megabyte.
        :param pulumi.Input[str] version: Version number to distinguish the contents of an image e.g. the version of the operating system.
        """
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if standard_image is not None:
            pulumi.set(__self__, "standard_image", standard_image)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if uploaded_size_mb is not None:
            pulumi.set(__self__, "uploaded_size_mb", uploaded_size_mb)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[str]]:
        """
        The creation date of the image.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the image.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        """
        If the image is in an error state (see status property), the error message can be seen in this field.
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Format of your image `iso` or `qcow`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL from which the image has been downloaded.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[str]]:
        """
        Time of the last update of the image.
        """
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the image.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        Provided type of operating system (OS). Please specify Windows for MS `Windows` and `Linux` for other OS. Specifying
        wrong OS type may lead to disfunctional cloud instance.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="standardImage")
    def standard_image(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag indicating that the image is either a standard (true) or a custom image (false).
        """
        return pulumi.get(self, "standard_image")

    @standard_image.setter
    def standard_image(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "standard_image", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Downloading status of the image (`downloading`, `downloaded` or `error`).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uploadedSizeMb")
    def uploaded_size_mb(self) -> Optional[pulumi.Input[int]]:
        """
        The size of the uploaded image in megabyte.
        """
        return pulumi.get(self, "uploaded_size_mb")

    @uploaded_size_mb.setter
    def uploaded_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "uploaded_size_mb", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version number to distinguish the contents of an image e.g. the version of the operating system.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class Image(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Image resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the image.
        :param pulumi.Input[str] image_url: URL from which the image has been downloaded.
        :param pulumi.Input[str] name: Name of the image.
        :param pulumi.Input[str] os_type: Provided type of operating system (OS). Please specify Windows for MS `Windows` and `Linux` for other OS. Specifying
               wrong OS type may lead to disfunctional cloud instance.
        :param pulumi.Input[str] version: Version number to distinguish the contents of an image e.g. the version of the operating system.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Image resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageArgs.__new__(ImageArgs)

            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            if image_url is None and not opts.urn:
                raise TypeError("Missing required property 'image_url'")
            __props__.__dict__["image_url"] = image_url
            __props__.__dict__["name"] = name
            if os_type is None and not opts.urn:
                raise TypeError("Missing required property 'os_type'")
            __props__.__dict__["os_type"] = os_type
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["error_message"] = None
            __props__.__dict__["format"] = None
            __props__.__dict__["last_updated"] = None
            __props__.__dict__["standard_image"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["uploaded_size_mb"] = None
        super(Image, __self__).__init__(
            'contabo:index/image:image',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            creation_date: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            error_message: Optional[pulumi.Input[str]] = None,
            format: Optional[pulumi.Input[str]] = None,
            image_url: Optional[pulumi.Input[str]] = None,
            last_updated: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            os_type: Optional[pulumi.Input[str]] = None,
            standard_image: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[str]] = None,
            uploaded_size_mb: Optional[pulumi.Input[int]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'Image':
        """
        Get an existing Image resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] creation_date: The creation date of the image.
        :param pulumi.Input[str] description: Description of the image.
        :param pulumi.Input[str] error_message: If the image is in an error state (see status property), the error message can be seen in this field.
        :param pulumi.Input[str] format: Format of your image `iso` or `qcow`.
        :param pulumi.Input[str] image_url: URL from which the image has been downloaded.
        :param pulumi.Input[str] last_updated: Time of the last update of the image.
        :param pulumi.Input[str] name: Name of the image.
        :param pulumi.Input[str] os_type: Provided type of operating system (OS). Please specify Windows for MS `Windows` and `Linux` for other OS. Specifying
               wrong OS type may lead to disfunctional cloud instance.
        :param pulumi.Input[bool] standard_image: Flag indicating that the image is either a standard (true) or a custom image (false).
        :param pulumi.Input[str] status: Downloading status of the image (`downloading`, `downloaded` or `error`).
        :param pulumi.Input[int] uploaded_size_mb: The size of the uploaded image in megabyte.
        :param pulumi.Input[str] version: Version number to distinguish the contents of an image e.g. the version of the operating system.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageState.__new__(_ImageState)

        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["description"] = description
        __props__.__dict__["error_message"] = error_message
        __props__.__dict__["format"] = format
        __props__.__dict__["image_url"] = image_url
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["name"] = name
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["standard_image"] = standard_image
        __props__.__dict__["status"] = status
        __props__.__dict__["uploaded_size_mb"] = uploaded_size_mb
        __props__.__dict__["version"] = version
        return Image(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[str]:
        """
        The creation date of the image.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description of the image.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> pulumi.Output[str]:
        """
        If the image is in an error state (see status property), the error message can be seen in this field.
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def format(self) -> pulumi.Output[str]:
        """
        Format of your image `iso` or `qcow`.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> pulumi.Output[str]:
        """
        URL from which the image has been downloaded.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[str]:
        """
        Time of the last update of the image.
        """
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the image.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[str]:
        """
        Provided type of operating system (OS). Please specify Windows for MS `Windows` and `Linux` for other OS. Specifying
        wrong OS type may lead to disfunctional cloud instance.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="standardImage")
    def standard_image(self) -> pulumi.Output[bool]:
        """
        Flag indicating that the image is either a standard (true) or a custom image (false).
        """
        return pulumi.get(self, "standard_image")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Downloading status of the image (`downloading`, `downloaded` or `error`).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="uploadedSizeMb")
    def uploaded_size_mb(self) -> pulumi.Output[int]:
        """
        The size of the uploaded image in megabyte.
        """
        return pulumi.get(self, "uploaded_size_mb")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        Version number to distinguish the contents of an image e.g. the version of the operating system.
        """
        return pulumi.get(self, "version")

