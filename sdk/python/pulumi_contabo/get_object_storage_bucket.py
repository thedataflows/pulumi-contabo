# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetObjectStorageBucketResult',
    'AwaitableGetObjectStorageBucketResult',
    'get_object_storage_bucket',
    'get_object_storage_bucket_output',
]

@pulumi.output_type
class GetObjectStorageBucketResult:
    """
    A collection of values returned by getObjectStorageBucket.
    """
    def __init__(__self__, creation_date=None, id=None, name=None, object_storage_id=None, public_sharing=None, public_sharing_link=None):
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if object_storage_id and not isinstance(object_storage_id, str):
            raise TypeError("Expected argument 'object_storage_id' to be a str")
        pulumi.set(__self__, "object_storage_id", object_storage_id)
        if public_sharing and not isinstance(public_sharing, bool):
            raise TypeError("Expected argument 'public_sharing' to be a bool")
        pulumi.set(__self__, "public_sharing", public_sharing)
        if public_sharing_link and not isinstance(public_sharing_link, str):
            raise TypeError("Expected argument 'public_sharing_link' to be a str")
        pulumi.set(__self__, "public_sharing_link", public_sharing_link)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> str:
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectStorageId")
    def object_storage_id(self) -> str:
        return pulumi.get(self, "object_storage_id")

    @property
    @pulumi.getter(name="publicSharing")
    def public_sharing(self) -> Optional[bool]:
        return pulumi.get(self, "public_sharing")

    @property
    @pulumi.getter(name="publicSharingLink")
    def public_sharing_link(self) -> str:
        return pulumi.get(self, "public_sharing_link")


class AwaitableGetObjectStorageBucketResult(GetObjectStorageBucketResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetObjectStorageBucketResult(
            creation_date=self.creation_date,
            id=self.id,
            name=self.name,
            object_storage_id=self.object_storage_id,
            public_sharing=self.public_sharing,
            public_sharing_link=self.public_sharing_link)


def get_object_storage_bucket(name: Optional[str] = None,
                              object_storage_id: Optional[str] = None,
                              public_sharing: Optional[bool] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetObjectStorageBucketResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['objectStorageId'] = object_storage_id
    __args__['publicSharing'] = public_sharing
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('contabo:index/getObjectStorageBucket:getObjectStorageBucket', __args__, opts=opts, typ=GetObjectStorageBucketResult).value

    return AwaitableGetObjectStorageBucketResult(
        creation_date=__ret__.creation_date,
        id=__ret__.id,
        name=__ret__.name,
        object_storage_id=__ret__.object_storage_id,
        public_sharing=__ret__.public_sharing,
        public_sharing_link=__ret__.public_sharing_link)


@_utilities.lift_output_func(get_object_storage_bucket)
def get_object_storage_bucket_output(name: Optional[pulumi.Input[str]] = None,
                                     object_storage_id: Optional[pulumi.Input[str]] = None,
                                     public_sharing: Optional[pulumi.Input[Optional[bool]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetObjectStorageBucketResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
