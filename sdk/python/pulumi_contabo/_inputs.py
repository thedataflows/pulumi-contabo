# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetInstanceAddOnArgs',
    'GetObjectStorageAutoScalingArgs',
    'InstanceAddOnArgs',
    'InstanceAdditionalIpArgs',
    'InstanceAdditionalIpV4Args',
    'InstanceIpConfigArgs',
    'InstanceIpConfigV4Args',
    'InstanceIpConfigV6Args',
    'Object_storageAutoScalingArgs',
    'Private_networkInstanceArgs',
    'Private_networkInstancePrivateIpConfigArgs',
    'Private_networkInstancePrivateIpConfigV4Args',
]

@pulumi.input_type
class GetInstanceAddOnArgs:
    def __init__(__self__, *,
                 id: str,
                 quantity: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def quantity(self) -> int:
        return pulumi.get(self, "quantity")

    @quantity.setter
    def quantity(self, value: int):
        pulumi.set(self, "quantity", value)


@pulumi.input_type
class GetObjectStorageAutoScalingArgs:
    def __init__(__self__, *,
                 error_message: str,
                 size_limit_tb: float,
                 state: str):
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "size_limit_tb", size_limit_tb)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: str):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter(name="sizeLimitTb")
    def size_limit_tb(self) -> float:
        return pulumi.get(self, "size_limit_tb")

    @size_limit_tb.setter
    def size_limit_tb(self, value: float):
        pulumi.set(self, "size_limit_tb", value)

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: str):
        pulumi.set(self, "state", value)


@pulumi.input_type
class InstanceAddOnArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 quantity: Optional[pulumi.Input[int]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def quantity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "quantity")

    @quantity.setter
    def quantity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quantity", value)


@pulumi.input_type
class InstanceAdditionalIpArgs:
    def __init__(__self__, *,
                 v4s: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAdditionalIpV4Args']]]] = None):
        if v4s is not None:
            pulumi.set(__self__, "v4s", v4s)

    @property
    @pulumi.getter
    def v4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAdditionalIpV4Args']]]]:
        return pulumi.get(self, "v4s")

    @v4s.setter
    def v4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAdditionalIpV4Args']]]]):
        pulumi.set(self, "v4s", value)


@pulumi.input_type
class InstanceAdditionalIpV4Args:
    def __init__(__self__, *,
                 gateway: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 netmask_cidr: Optional[pulumi.Input[int]] = None):
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask_cidr is not None:
            pulumi.set(__self__, "netmask_cidr", netmask_cidr)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="netmaskCidr")
    def netmask_cidr(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "netmask_cidr")

    @netmask_cidr.setter
    def netmask_cidr(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "netmask_cidr", value)


@pulumi.input_type
class InstanceIpConfigArgs:
    def __init__(__self__, *,
                 v4s: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpConfigV4Args']]]] = None,
                 v6s: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpConfigV6Args']]]] = None):
        if v4s is not None:
            pulumi.set(__self__, "v4s", v4s)
        if v6s is not None:
            pulumi.set(__self__, "v6s", v6s)

    @property
    @pulumi.getter
    def v4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpConfigV4Args']]]]:
        return pulumi.get(self, "v4s")

    @v4s.setter
    def v4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpConfigV4Args']]]]):
        pulumi.set(self, "v4s", value)

    @property
    @pulumi.getter
    def v6s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpConfigV6Args']]]]:
        return pulumi.get(self, "v6s")

    @v6s.setter
    def v6s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpConfigV6Args']]]]):
        pulumi.set(self, "v6s", value)


@pulumi.input_type
class InstanceIpConfigV4Args:
    def __init__(__self__, *,
                 gateway: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 netmask_cidr: Optional[pulumi.Input[int]] = None):
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask_cidr is not None:
            pulumi.set(__self__, "netmask_cidr", netmask_cidr)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="netmaskCidr")
    def netmask_cidr(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "netmask_cidr")

    @netmask_cidr.setter
    def netmask_cidr(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "netmask_cidr", value)


@pulumi.input_type
class InstanceIpConfigV6Args:
    def __init__(__self__, *,
                 gateway: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 netmask_cidr: Optional[pulumi.Input[int]] = None):
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask_cidr is not None:
            pulumi.set(__self__, "netmask_cidr", netmask_cidr)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="netmaskCidr")
    def netmask_cidr(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "netmask_cidr")

    @netmask_cidr.setter
    def netmask_cidr(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "netmask_cidr", value)


@pulumi.input_type
class Object_storageAutoScalingArgs:
    def __init__(__self__, *,
                 error_message: Optional[pulumi.Input[str]] = None,
                 size_limit_tb: Optional[pulumi.Input[float]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if size_limit_tb is not None:
            pulumi.set(__self__, "size_limit_tb", size_limit_tb)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter(name="sizeLimitTb")
    def size_limit_tb(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "size_limit_tb")

    @size_limit_tb.setter
    def size_limit_tb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size_limit_tb", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class Private_networkInstanceArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 error_message: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_ip_configs: Optional[pulumi.Input[Sequence[pulumi.Input['Private_networkInstancePrivateIpConfigArgs']]]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip_configs is not None:
            pulumi.set(__self__, "private_ip_configs", private_ip_configs)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateIpConfigs")
    def private_ip_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Private_networkInstancePrivateIpConfigArgs']]]]:
        return pulumi.get(self, "private_ip_configs")

    @private_ip_configs.setter
    def private_ip_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Private_networkInstancePrivateIpConfigArgs']]]]):
        pulumi.set(self, "private_ip_configs", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class Private_networkInstancePrivateIpConfigArgs:
    def __init__(__self__, *,
                 v4s: Optional[pulumi.Input[Sequence[pulumi.Input['Private_networkInstancePrivateIpConfigV4Args']]]] = None):
        if v4s is not None:
            pulumi.set(__self__, "v4s", v4s)

    @property
    @pulumi.getter
    def v4s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Private_networkInstancePrivateIpConfigV4Args']]]]:
        return pulumi.get(self, "v4s")

    @v4s.setter
    def v4s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Private_networkInstancePrivateIpConfigV4Args']]]]):
        pulumi.set(self, "v4s", value)


@pulumi.input_type
class Private_networkInstancePrivateIpConfigV4Args:
    def __init__(__self__, *,
                 gateway: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 netmask_cidr: Optional[pulumi.Input[int]] = None):
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask_cidr is not None:
            pulumi.set(__self__, "netmask_cidr", netmask_cidr)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="netmaskCidr")
    def netmask_cidr(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "netmask_cidr")

    @netmask_cidr.setter
    def netmask_cidr(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "netmask_cidr", value)


