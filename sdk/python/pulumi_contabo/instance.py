# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 add_ons: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAddOnArgs']]]] = None,
                 cancel_date: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 root_password: Optional[pulumi.Input[int]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] cancel_date: The date on which the instance will be cancelled.
        :param pulumi.Input[str] display_name: The instance name chosen by the customer that will be shown in the customer panel.
        :param pulumi.Input[str] image_id: CAUTION: On updating this value your server will be reinstalled! Image Id is used to set up the compute instance. Ubuntu
               20.04 is the default, currently you have to get the Id with our
               [API](https://api.contabo.com/#tag/Images/operation/retrieveImage) or via our [command
               line](https://github.com/contabo/cntb) tool with this command: `cntb get images`.
        :param pulumi.Input[str] license: Additional license in order to enhance your chosen product. It is mainly needed for software licenses on your product
               (not needed for windows). See our [api documentation](https://api.contabo.com/#tag/Instances/operation/createInstance)
               for all available licenses.
        :param pulumi.Input[int] period: Initial contract period in months. Available periods are: 1, 3, 6 and 12 months. The default setting is 1 month.
        :param pulumi.Input[str] product_id: Choose the VPS/VDS product you want to buy. See our products
               [here](https://api.contabo.com/#tag/Instances/operation/createInstance).
        :param pulumi.Input[str] region: Instance Region where the compute instance should be located. Default region is the EU. Following regions are available:
               `EU`,`US-central`,`US-east`,`US-west`,`SIN`.
        :param pulumi.Input[int] root_password: CAUTION: On updating this value your server will be reinstalled! Root password of the compute instance.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ssh_keys: CAUTION: On updating this value your server will be reinstalled! Array of `secretIds` of public SSH keys for logging
               into as defaultUser with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management
               API.
        :param pulumi.Input[str] user_data: CAUTION: On updating this value your server will be reinstalled! Cloud-Init Config in order to customize during start of
               compute instance.
        """
        if add_ons is not None:
            pulumi.set(__self__, "add_ons", add_ons)
        if cancel_date is not None:
            pulumi.set(__self__, "cancel_date", cancel_date)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)

    @property
    @pulumi.getter(name="addOns")
    def add_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAddOnArgs']]]]:
        return pulumi.get(self, "add_ons")

    @add_ons.setter
    def add_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAddOnArgs']]]]):
        pulumi.set(self, "add_ons", value)

    @property
    @pulumi.getter(name="cancelDate")
    def cancel_date(self) -> Optional[pulumi.Input[str]]:
        """
        The date on which the instance will be cancelled.
        """
        return pulumi.get(self, "cancel_date")

    @cancel_date.setter
    def cancel_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cancel_date", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The instance name chosen by the customer that will be shown in the customer panel.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        CAUTION: On updating this value your server will be reinstalled! Image Id is used to set up the compute instance. Ubuntu
        20.04 is the default, currently you have to get the Id with our
        [API](https://api.contabo.com/#tag/Images/operation/retrieveImage) or via our [command
        line](https://github.com/contabo/cntb) tool with this command: `cntb get images`.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        """
        Additional license in order to enhance your chosen product. It is mainly needed for software licenses on your product
        (not needed for windows). See our [api documentation](https://api.contabo.com/#tag/Instances/operation/createInstance)
        for all available licenses.
        """
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Initial contract period in months. Available periods are: 1, 3, 6 and 12 months. The default setting is 1 month.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[str]]:
        """
        Choose the VPS/VDS product you want to buy. See our products
        [here](https://api.contabo.com/#tag/Instances/operation/createInstance).
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Region where the compute instance should be located. Default region is the EU. Following regions are available:
        `EU`,`US-central`,`US-east`,`US-west`,`SIN`.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[int]]:
        """
        CAUTION: On updating this value your server will be reinstalled! Root password of the compute instance.
        """
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_password", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        CAUTION: On updating this value your server will be reinstalled! Array of `secretIds` of public SSH keys for logging
        into as defaultUser with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management
        API.
        """
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        CAUTION: On updating this value your server will be reinstalled! Cloud-Init Config in order to customize during start of
        compute instance.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 add_ons: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAddOnArgs']]]] = None,
                 additional_ips: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAdditionalIpArgs']]]] = None,
                 cancel_date: Optional[pulumi.Input[str]] = None,
                 cpu_cores: Optional[pulumi.Input[int]] = None,
                 created_date: Optional[pulumi.Input[str]] = None,
                 disk_mb: Optional[pulumi.Input[int]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 error_message: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 ip_configs: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpConfigArgs']]]] = None,
                 last_updated: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 product_type: Optional[pulumi.Input[str]] = None,
                 ram_mb: Optional[pulumi.Input[int]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 root_password: Optional[pulumi.Input[int]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 v_host_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceAdditionalIpArgs']]] additional_ips: All other additional IP addresses of the instance.
        :param pulumi.Input[str] cancel_date: The date on which the instance will be cancelled.
        :param pulumi.Input[int] cpu_cores: CPU core count of the instance.
        :param pulumi.Input[str] created_date: The creation date of the compute instance.
        :param pulumi.Input[int] disk_mb: Image disk size of the instance in megabyte.
        :param pulumi.Input[str] display_name: The instance name chosen by the customer that will be shown in the customer panel.
        :param pulumi.Input[str] error_message: If the instance is in an error state (see status property), the error message can be seen in this field.
        :param pulumi.Input[str] image_id: CAUTION: On updating this value your server will be reinstalled! Image Id is used to set up the compute instance. Ubuntu
               20.04 is the default, currently you have to get the Id with our
               [API](https://api.contabo.com/#tag/Images/operation/retrieveImage) or via our [command
               line](https://github.com/contabo/cntb) tool with this command: `cntb get images`.
        :param pulumi.Input[str] last_updated: Time of the last update of the compute instance.
        :param pulumi.Input[str] license: Additional license in order to enhance your chosen product. It is mainly needed for software licenses on your product
               (not needed for windows). See our [api documentation](https://api.contabo.com/#tag/Instances/operation/createInstance)
               for all available licenses.
        :param pulumi.Input[str] mac_address: Mac address of the instance.
        :param pulumi.Input[str] name: Name of the compute instance.
        :param pulumi.Input[str] os_type: Type of operating system (OS) installed on the instance.
        :param pulumi.Input[int] period: Initial contract period in months. Available periods are: 1, 3, 6 and 12 months. The default setting is 1 month.
        :param pulumi.Input[str] product_id: Choose the VPS/VDS product you want to buy. See our products
               [here](https://api.contabo.com/#tag/Instances/operation/createInstance).
        :param pulumi.Input[str] product_type: InsInstance's category depending on Product Id. Following product types are available: `hdd`,`ssd`,`vds`,`nvme`.
        :param pulumi.Input[int] ram_mb: Image ram size in megabyte.
        :param pulumi.Input[str] region: Instance Region where the compute instance should be located. Default region is the EU. Following regions are available:
               `EU`,`US-central`,`US-east`,`US-west`,`SIN`.
        :param pulumi.Input[int] root_password: CAUTION: On updating this value your server will be reinstalled! Root password of the compute instance.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ssh_keys: CAUTION: On updating this value your server will be reinstalled! Array of `secretIds` of public SSH keys for logging
               into as defaultUser with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management
               API.
        :param pulumi.Input[str] status: Status of the compute instance. The status can be set to `provisioning`, `uninstalled`, `running`, `stopped`, `error`,
               `installing`, `unknown`, or `installed`.
        :param pulumi.Input[str] user_data: CAUTION: On updating this value your server will be reinstalled! Cloud-Init Config in order to customize during start of
               compute instance.
        :param pulumi.Input[int] v_host_id: Identifier of the host system.
        """
        if add_ons is not None:
            pulumi.set(__self__, "add_ons", add_ons)
        if additional_ips is not None:
            pulumi.set(__self__, "additional_ips", additional_ips)
        if cancel_date is not None:
            pulumi.set(__self__, "cancel_date", cancel_date)
        if cpu_cores is not None:
            pulumi.set(__self__, "cpu_cores", cpu_cores)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if disk_mb is not None:
            pulumi.set(__self__, "disk_mb", disk_mb)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if ip_configs is not None:
            pulumi.set(__self__, "ip_configs", ip_configs)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if license is not None:
            pulumi.set(__self__, "license", license)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if product_type is not None:
            pulumi.set(__self__, "product_type", product_type)
        if ram_mb is not None:
            pulumi.set(__self__, "ram_mb", ram_mb)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if root_password is not None:
            pulumi.set(__self__, "root_password", root_password)
        if ssh_keys is not None:
            pulumi.set(__self__, "ssh_keys", ssh_keys)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if v_host_id is not None:
            pulumi.set(__self__, "v_host_id", v_host_id)

    @property
    @pulumi.getter(name="addOns")
    def add_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAddOnArgs']]]]:
        return pulumi.get(self, "add_ons")

    @add_ons.setter
    def add_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAddOnArgs']]]]):
        pulumi.set(self, "add_ons", value)

    @property
    @pulumi.getter(name="additionalIps")
    def additional_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAdditionalIpArgs']]]]:
        """
        All other additional IP addresses of the instance.
        """
        return pulumi.get(self, "additional_ips")

    @additional_ips.setter
    def additional_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceAdditionalIpArgs']]]]):
        pulumi.set(self, "additional_ips", value)

    @property
    @pulumi.getter(name="cancelDate")
    def cancel_date(self) -> Optional[pulumi.Input[str]]:
        """
        The date on which the instance will be cancelled.
        """
        return pulumi.get(self, "cancel_date")

    @cancel_date.setter
    def cancel_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cancel_date", value)

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> Optional[pulumi.Input[int]]:
        """
        CPU core count of the instance.
        """
        return pulumi.get(self, "cpu_cores")

    @cpu_cores.setter
    def cpu_cores(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu_cores", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[pulumi.Input[str]]:
        """
        The creation date of the compute instance.
        """
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter(name="diskMb")
    def disk_mb(self) -> Optional[pulumi.Input[int]]:
        """
        Image disk size of the instance in megabyte.
        """
        return pulumi.get(self, "disk_mb")

    @disk_mb.setter
    def disk_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_mb", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The instance name chosen by the customer that will be shown in the customer panel.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        """
        If the instance is in an error state (see status property), the error message can be seen in this field.
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        CAUTION: On updating this value your server will be reinstalled! Image Id is used to set up the compute instance. Ubuntu
        20.04 is the default, currently you have to get the Id with our
        [API](https://api.contabo.com/#tag/Images/operation/retrieveImage) or via our [command
        line](https://github.com/contabo/cntb) tool with this command: `cntb get images`.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="ipConfigs")
    def ip_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpConfigArgs']]]]:
        return pulumi.get(self, "ip_configs")

    @ip_configs.setter
    def ip_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceIpConfigArgs']]]]):
        pulumi.set(self, "ip_configs", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[str]]:
        """
        Time of the last update of the compute instance.
        """
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter
    def license(self) -> Optional[pulumi.Input[str]]:
        """
        Additional license in order to enhance your chosen product. It is mainly needed for software licenses on your product
        (not needed for windows). See our [api documentation](https://api.contabo.com/#tag/Instances/operation/createInstance)
        for all available licenses.
        """
        return pulumi.get(self, "license")

    @license.setter
    def license(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[str]]:
        """
        Mac address of the instance.
        """
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the compute instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of operating system (OS) installed on the instance.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Initial contract period in months. Available periods are: 1, 3, 6 and 12 months. The default setting is 1 month.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[str]]:
        """
        Choose the VPS/VDS product you want to buy. See our products
        [here](https://api.contabo.com/#tag/Instances/operation/createInstance).
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> Optional[pulumi.Input[str]]:
        """
        InsInstance's category depending on Product Id. Following product types are available: `hdd`,`ssd`,`vds`,`nvme`.
        """
        return pulumi.get(self, "product_type")

    @product_type.setter
    def product_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_type", value)

    @property
    @pulumi.getter(name="ramMb")
    def ram_mb(self) -> Optional[pulumi.Input[int]]:
        """
        Image ram size in megabyte.
        """
        return pulumi.get(self, "ram_mb")

    @ram_mb.setter
    def ram_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ram_mb", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Region where the compute instance should be located. Default region is the EU. Following regions are available:
        `EU`,`US-central`,`US-east`,`US-west`,`SIN`.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> Optional[pulumi.Input[int]]:
        """
        CAUTION: On updating this value your server will be reinstalled! Root password of the compute instance.
        """
        return pulumi.get(self, "root_password")

    @root_password.setter
    def root_password(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_password", value)

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        CAUTION: On updating this value your server will be reinstalled! Array of `secretIds` of public SSH keys for logging
        into as defaultUser with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management
        API.
        """
        return pulumi.get(self, "ssh_keys")

    @ssh_keys.setter
    def ssh_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "ssh_keys", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the compute instance. The status can be set to `provisioning`, `uninstalled`, `running`, `stopped`, `error`,
        `installing`, `unknown`, or `installed`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        CAUTION: On updating this value your server will be reinstalled! Cloud-Init Config in order to customize during start of
        compute instance.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="vHostId")
    def v_host_id(self) -> Optional[pulumi.Input[int]]:
        """
        Identifier of the host system.
        """
        return pulumi.get(self, "v_host_id")

    @v_host_id.setter
    def v_host_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "v_host_id", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_ons: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceAddOnArgs']]]]] = None,
                 cancel_date: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 root_password: Optional[pulumi.Input[int]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Instance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cancel_date: The date on which the instance will be cancelled.
        :param pulumi.Input[str] display_name: The instance name chosen by the customer that will be shown in the customer panel.
        :param pulumi.Input[str] image_id: CAUTION: On updating this value your server will be reinstalled! Image Id is used to set up the compute instance. Ubuntu
               20.04 is the default, currently you have to get the Id with our
               [API](https://api.contabo.com/#tag/Images/operation/retrieveImage) or via our [command
               line](https://github.com/contabo/cntb) tool with this command: `cntb get images`.
        :param pulumi.Input[str] license: Additional license in order to enhance your chosen product. It is mainly needed for software licenses on your product
               (not needed for windows). See our [api documentation](https://api.contabo.com/#tag/Instances/operation/createInstance)
               for all available licenses.
        :param pulumi.Input[int] period: Initial contract period in months. Available periods are: 1, 3, 6 and 12 months. The default setting is 1 month.
        :param pulumi.Input[str] product_id: Choose the VPS/VDS product you want to buy. See our products
               [here](https://api.contabo.com/#tag/Instances/operation/createInstance).
        :param pulumi.Input[str] region: Instance Region where the compute instance should be located. Default region is the EU. Following regions are available:
               `EU`,`US-central`,`US-east`,`US-west`,`SIN`.
        :param pulumi.Input[int] root_password: CAUTION: On updating this value your server will be reinstalled! Root password of the compute instance.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ssh_keys: CAUTION: On updating this value your server will be reinstalled! Array of `secretIds` of public SSH keys for logging
               into as defaultUser with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management
               API.
        :param pulumi.Input[str] user_data: CAUTION: On updating this value your server will be reinstalled! Cloud-Init Config in order to customize during start of
               compute instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[InstanceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Instance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_ons: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceAddOnArgs']]]]] = None,
                 cancel_date: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 license: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 root_password: Optional[pulumi.Input[int]] = None,
                 ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["add_ons"] = add_ons
            __props__.__dict__["cancel_date"] = cancel_date
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["license"] = license
            __props__.__dict__["period"] = period
            __props__.__dict__["product_id"] = product_id
            __props__.__dict__["region"] = region
            __props__.__dict__["root_password"] = root_password
            __props__.__dict__["ssh_keys"] = ssh_keys
            __props__.__dict__["user_data"] = user_data
            __props__.__dict__["additional_ips"] = None
            __props__.__dict__["cpu_cores"] = None
            __props__.__dict__["created_date"] = None
            __props__.__dict__["disk_mb"] = None
            __props__.__dict__["error_message"] = None
            __props__.__dict__["ip_configs"] = None
            __props__.__dict__["last_updated"] = None
            __props__.__dict__["mac_address"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["os_type"] = None
            __props__.__dict__["product_type"] = None
            __props__.__dict__["ram_mb"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["v_host_id"] = None
        super(Instance, __self__).__init__(
            'contabo:index/instance:instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_ons: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceAddOnArgs']]]]] = None,
            additional_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceAdditionalIpArgs']]]]] = None,
            cancel_date: Optional[pulumi.Input[str]] = None,
            cpu_cores: Optional[pulumi.Input[int]] = None,
            created_date: Optional[pulumi.Input[str]] = None,
            disk_mb: Optional[pulumi.Input[int]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            error_message: Optional[pulumi.Input[str]] = None,
            image_id: Optional[pulumi.Input[str]] = None,
            ip_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceIpConfigArgs']]]]] = None,
            last_updated: Optional[pulumi.Input[str]] = None,
            license: Optional[pulumi.Input[str]] = None,
            mac_address: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            os_type: Optional[pulumi.Input[str]] = None,
            period: Optional[pulumi.Input[int]] = None,
            product_id: Optional[pulumi.Input[str]] = None,
            product_type: Optional[pulumi.Input[str]] = None,
            ram_mb: Optional[pulumi.Input[int]] = None,
            region: Optional[pulumi.Input[str]] = None,
            root_password: Optional[pulumi.Input[int]] = None,
            ssh_keys: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            user_data: Optional[pulumi.Input[str]] = None,
            v_host_id: Optional[pulumi.Input[int]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceAdditionalIpArgs']]]] additional_ips: All other additional IP addresses of the instance.
        :param pulumi.Input[str] cancel_date: The date on which the instance will be cancelled.
        :param pulumi.Input[int] cpu_cores: CPU core count of the instance.
        :param pulumi.Input[str] created_date: The creation date of the compute instance.
        :param pulumi.Input[int] disk_mb: Image disk size of the instance in megabyte.
        :param pulumi.Input[str] display_name: The instance name chosen by the customer that will be shown in the customer panel.
        :param pulumi.Input[str] error_message: If the instance is in an error state (see status property), the error message can be seen in this field.
        :param pulumi.Input[str] image_id: CAUTION: On updating this value your server will be reinstalled! Image Id is used to set up the compute instance. Ubuntu
               20.04 is the default, currently you have to get the Id with our
               [API](https://api.contabo.com/#tag/Images/operation/retrieveImage) or via our [command
               line](https://github.com/contabo/cntb) tool with this command: `cntb get images`.
        :param pulumi.Input[str] last_updated: Time of the last update of the compute instance.
        :param pulumi.Input[str] license: Additional license in order to enhance your chosen product. It is mainly needed for software licenses on your product
               (not needed for windows). See our [api documentation](https://api.contabo.com/#tag/Instances/operation/createInstance)
               for all available licenses.
        :param pulumi.Input[str] mac_address: Mac address of the instance.
        :param pulumi.Input[str] name: Name of the compute instance.
        :param pulumi.Input[str] os_type: Type of operating system (OS) installed on the instance.
        :param pulumi.Input[int] period: Initial contract period in months. Available periods are: 1, 3, 6 and 12 months. The default setting is 1 month.
        :param pulumi.Input[str] product_id: Choose the VPS/VDS product you want to buy. See our products
               [here](https://api.contabo.com/#tag/Instances/operation/createInstance).
        :param pulumi.Input[str] product_type: InsInstance's category depending on Product Id. Following product types are available: `hdd`,`ssd`,`vds`,`nvme`.
        :param pulumi.Input[int] ram_mb: Image ram size in megabyte.
        :param pulumi.Input[str] region: Instance Region where the compute instance should be located. Default region is the EU. Following regions are available:
               `EU`,`US-central`,`US-east`,`US-west`,`SIN`.
        :param pulumi.Input[int] root_password: CAUTION: On updating this value your server will be reinstalled! Root password of the compute instance.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ssh_keys: CAUTION: On updating this value your server will be reinstalled! Array of `secretIds` of public SSH keys for logging
               into as defaultUser with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management
               API.
        :param pulumi.Input[str] status: Status of the compute instance. The status can be set to `provisioning`, `uninstalled`, `running`, `stopped`, `error`,
               `installing`, `unknown`, or `installed`.
        :param pulumi.Input[str] user_data: CAUTION: On updating this value your server will be reinstalled! Cloud-Init Config in order to customize during start of
               compute instance.
        :param pulumi.Input[int] v_host_id: Identifier of the host system.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["add_ons"] = add_ons
        __props__.__dict__["additional_ips"] = additional_ips
        __props__.__dict__["cancel_date"] = cancel_date
        __props__.__dict__["cpu_cores"] = cpu_cores
        __props__.__dict__["created_date"] = created_date
        __props__.__dict__["disk_mb"] = disk_mb
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["error_message"] = error_message
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["ip_configs"] = ip_configs
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["license"] = license
        __props__.__dict__["mac_address"] = mac_address
        __props__.__dict__["name"] = name
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["period"] = period
        __props__.__dict__["product_id"] = product_id
        __props__.__dict__["product_type"] = product_type
        __props__.__dict__["ram_mb"] = ram_mb
        __props__.__dict__["region"] = region
        __props__.__dict__["root_password"] = root_password
        __props__.__dict__["ssh_keys"] = ssh_keys
        __props__.__dict__["status"] = status
        __props__.__dict__["user_data"] = user_data
        __props__.__dict__["v_host_id"] = v_host_id
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addOns")
    def add_ons(self) -> pulumi.Output[Sequence['outputs.InstanceAddOn']]:
        return pulumi.get(self, "add_ons")

    @property
    @pulumi.getter(name="additionalIps")
    def additional_ips(self) -> pulumi.Output[Sequence['outputs.InstanceAdditionalIp']]:
        """
        All other additional IP addresses of the instance.
        """
        return pulumi.get(self, "additional_ips")

    @property
    @pulumi.getter(name="cancelDate")
    def cancel_date(self) -> pulumi.Output[Optional[str]]:
        """
        The date on which the instance will be cancelled.
        """
        return pulumi.get(self, "cancel_date")

    @property
    @pulumi.getter(name="cpuCores")
    def cpu_cores(self) -> pulumi.Output[int]:
        """
        CPU core count of the instance.
        """
        return pulumi.get(self, "cpu_cores")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> pulumi.Output[str]:
        """
        The creation date of the compute instance.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter(name="diskMb")
    def disk_mb(self) -> pulumi.Output[int]:
        """
        Image disk size of the instance in megabyte.
        """
        return pulumi.get(self, "disk_mb")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The instance name chosen by the customer that will be shown in the customer panel.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> pulumi.Output[str]:
        """
        If the instance is in an error state (see status property), the error message can be seen in this field.
        """
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[str]:
        """
        CAUTION: On updating this value your server will be reinstalled! Image Id is used to set up the compute instance. Ubuntu
        20.04 is the default, currently you have to get the Id with our
        [API](https://api.contabo.com/#tag/Images/operation/retrieveImage) or via our [command
        line](https://github.com/contabo/cntb) tool with this command: `cntb get images`.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="ipConfigs")
    def ip_configs(self) -> pulumi.Output[Sequence['outputs.InstanceIpConfig']]:
        return pulumi.get(self, "ip_configs")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[str]:
        """
        Time of the last update of the compute instance.
        """
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def license(self) -> pulumi.Output[str]:
        """
        Additional license in order to enhance your chosen product. It is mainly needed for software licenses on your product
        (not needed for windows). See our [api documentation](https://api.contabo.com/#tag/Instances/operation/createInstance)
        for all available licenses.
        """
        return pulumi.get(self, "license")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> pulumi.Output[str]:
        """
        Mac address of the instance.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the compute instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[str]:
        """
        Type of operating system (OS) installed on the instance.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[int]:
        """
        Initial contract period in months. Available periods are: 1, 3, 6 and 12 months. The default setting is 1 month.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> pulumi.Output[str]:
        """
        Choose the VPS/VDS product you want to buy. See our products
        [here](https://api.contabo.com/#tag/Instances/operation/createInstance).
        """
        return pulumi.get(self, "product_id")

    @property
    @pulumi.getter(name="productType")
    def product_type(self) -> pulumi.Output[str]:
        """
        InsInstance's category depending on Product Id. Following product types are available: `hdd`,`ssd`,`vds`,`nvme`.
        """
        return pulumi.get(self, "product_type")

    @property
    @pulumi.getter(name="ramMb")
    def ram_mb(self) -> pulumi.Output[int]:
        """
        Image ram size in megabyte.
        """
        return pulumi.get(self, "ram_mb")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Instance Region where the compute instance should be located. Default region is the EU. Following regions are available:
        `EU`,`US-central`,`US-east`,`US-west`,`SIN`.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="rootPassword")
    def root_password(self) -> pulumi.Output[Optional[int]]:
        """
        CAUTION: On updating this value your server will be reinstalled! Root password of the compute instance.
        """
        return pulumi.get(self, "root_password")

    @property
    @pulumi.getter(name="sshKeys")
    def ssh_keys(self) -> pulumi.Output[Sequence[int]]:
        """
        CAUTION: On updating this value your server will be reinstalled! Array of `secretIds` of public SSH keys for logging
        into as defaultUser with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management
        API.
        """
        return pulumi.get(self, "ssh_keys")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of the compute instance. The status can be set to `provisioning`, `uninstalled`, `running`, `stopped`, `error`,
        `installing`, `unknown`, or `installed`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[Optional[str]]:
        """
        CAUTION: On updating this value your server will be reinstalled! Cloud-Init Config in order to customize during start of
        compute instance.
        """
        return pulumi.get(self, "user_data")

    @property
    @pulumi.getter(name="vHostId")
    def v_host_id(self) -> pulumi.Output[int]:
        """
        Identifier of the host system.
        """
        return pulumi.get(self, "v_host_id")

