# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetImageResult',
    'AwaitableGetImageResult',
    'get_image',
    'get_image_output',
]

@pulumi.output_type
class GetImageResult:
    """
    A collection of values returned by getImage.
    """
    def __init__(__self__, creation_date=None, description=None, error_message=None, format=None, id=None, last_updated=None, name=None, os_type=None, standard_image=None, status=None, uploaded_size_mb=None, version=None):
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if error_message and not isinstance(error_message, str):
            raise TypeError("Expected argument 'error_message' to be a str")
        pulumi.set(__self__, "error_message", error_message)
        if format and not isinstance(format, str):
            raise TypeError("Expected argument 'format' to be a str")
        pulumi.set(__self__, "format", format)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_updated and not isinstance(last_updated, str):
            raise TypeError("Expected argument 'last_updated' to be a str")
        pulumi.set(__self__, "last_updated", last_updated)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if os_type and not isinstance(os_type, str):
            raise TypeError("Expected argument 'os_type' to be a str")
        pulumi.set(__self__, "os_type", os_type)
        if standard_image and not isinstance(standard_image, bool):
            raise TypeError("Expected argument 'standard_image' to be a bool")
        pulumi.set(__self__, "standard_image", standard_image)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if uploaded_size_mb and not isinstance(uploaded_size_mb, int):
            raise TypeError("Expected argument 'uploaded_size_mb' to be a int")
        pulumi.set(__self__, "uploaded_size_mb", uploaded_size_mb)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> str:
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter
    def format(self) -> str:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="standardImage")
    def standard_image(self) -> bool:
        return pulumi.get(self, "standard_image")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="uploadedSizeMb")
    def uploaded_size_mb(self) -> int:
        return pulumi.get(self, "uploaded_size_mb")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


class AwaitableGetImageResult(GetImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImageResult(
            creation_date=self.creation_date,
            description=self.description,
            error_message=self.error_message,
            format=self.format,
            id=self.id,
            last_updated=self.last_updated,
            name=self.name,
            os_type=self.os_type,
            standard_image=self.standard_image,
            status=self.status,
            uploaded_size_mb=self.uploaded_size_mb,
            version=self.version)


def get_image(description: Optional[str] = None,
              id: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImageResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('contabo:index/getImage:getImage', __args__, opts=opts, typ=GetImageResult).value

    return AwaitableGetImageResult(
        creation_date=__ret__.creation_date,
        description=__ret__.description,
        error_message=__ret__.error_message,
        format=__ret__.format,
        id=__ret__.id,
        last_updated=__ret__.last_updated,
        name=__ret__.name,
        os_type=__ret__.os_type,
        standard_image=__ret__.standard_image,
        status=__ret__.status,
        uploaded_size_mb=__ret__.uploaded_size_mb,
        version=__ret__.version)


@_utilities.lift_output_func(get_image)
def get_image_output(description: Optional[pulumi.Input[Optional[str]]] = None,
                     id: Optional[pulumi.Input[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetImageResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
