# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetInstanceAddOnResult',
    'GetInstanceAdditionalIpsV4Result',
    'GetInstanceIpConfigResult',
    'GetInstanceIpConfigV4Result',
    'GetInstanceIpConfigV6Result',
    'GetObjectStorageAutoScalingResult',
    'GetPrivateNetworkInstanceResult',
    'GetPrivateNetworkInstancePrivateIpConfigResult',
    'GetPrivateNetworkInstancePrivateIpConfigV4Result',
    'InstanceAddOn',
    'InstanceAdditionalIp',
    'InstanceAdditionalIpV4',
    'InstanceIpConfig',
    'InstanceIpConfigV4',
    'InstanceIpConfigV6',
    'Object_storageAutoScaling',
    'Private_networkInstance',
    'Private_networkInstancePrivateIpConfig',
    'Private_networkInstancePrivateIpConfigV4',
]

@pulumi.output_type
class GetInstanceAddOnResult(dict):
    def __init__(__self__, *,
                 id: str,
                 quantity: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def quantity(self) -> int:
        return pulumi.get(self, "quantity")


@pulumi.output_type
class GetInstanceAdditionalIpsV4Result(dict):
    def __init__(__self__, *,
                 gateway: str,
                 ip: str,
                 netmask_cidr: int):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "netmask_cidr", netmask_cidr)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="netmaskCidr")
    def netmask_cidr(self) -> int:
        return pulumi.get(self, "netmask_cidr")


@pulumi.output_type
class GetInstanceIpConfigResult(dict):
    def __init__(__self__, *,
                 v4s: Sequence['outputs.GetInstanceIpConfigV4Result'],
                 v6s: Sequence['outputs.GetInstanceIpConfigV6Result']):
        pulumi.set(__self__, "v4s", v4s)
        pulumi.set(__self__, "v6s", v6s)

    @property
    @pulumi.getter
    def v4s(self) -> Sequence['outputs.GetInstanceIpConfigV4Result']:
        return pulumi.get(self, "v4s")

    @property
    @pulumi.getter
    def v6s(self) -> Sequence['outputs.GetInstanceIpConfigV6Result']:
        return pulumi.get(self, "v6s")


@pulumi.output_type
class GetInstanceIpConfigV4Result(dict):
    def __init__(__self__, *,
                 gateway: str,
                 ip: str,
                 netmask_cidr: int):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "netmask_cidr", netmask_cidr)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="netmaskCidr")
    def netmask_cidr(self) -> int:
        return pulumi.get(self, "netmask_cidr")


@pulumi.output_type
class GetInstanceIpConfigV6Result(dict):
    def __init__(__self__, *,
                 gateway: str,
                 ip: str,
                 netmask_cidr: int):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "netmask_cidr", netmask_cidr)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="netmaskCidr")
    def netmask_cidr(self) -> int:
        return pulumi.get(self, "netmask_cidr")


@pulumi.output_type
class GetObjectStorageAutoScalingResult(dict):
    def __init__(__self__, *,
                 error_message: str,
                 size_limit_tb: float,
                 state: str):
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "size_limit_tb", size_limit_tb)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="sizeLimitTb")
    def size_limit_tb(self) -> float:
        return pulumi.get(self, "size_limit_tb")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetPrivateNetworkInstanceResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 error_message: str,
                 instance_id: str,
                 name: str,
                 private_ip_configs: Sequence['outputs.GetPrivateNetworkInstancePrivateIpConfigResult'],
                 status: str):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "error_message", error_message)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_ip_configs", private_ip_configs)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> str:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateIpConfigs")
    def private_ip_configs(self) -> Sequence['outputs.GetPrivateNetworkInstancePrivateIpConfigResult']:
        return pulumi.get(self, "private_ip_configs")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetPrivateNetworkInstancePrivateIpConfigResult(dict):
    def __init__(__self__, *,
                 v4s: Sequence['outputs.GetPrivateNetworkInstancePrivateIpConfigV4Result']):
        pulumi.set(__self__, "v4s", v4s)

    @property
    @pulumi.getter
    def v4s(self) -> Sequence['outputs.GetPrivateNetworkInstancePrivateIpConfigV4Result']:
        return pulumi.get(self, "v4s")


@pulumi.output_type
class GetPrivateNetworkInstancePrivateIpConfigV4Result(dict):
    def __init__(__self__, *,
                 gateway: str,
                 ip: str,
                 netmask_cidr: int):
        pulumi.set(__self__, "gateway", gateway)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "netmask_cidr", netmask_cidr)

    @property
    @pulumi.getter
    def gateway(self) -> str:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="netmaskCidr")
    def netmask_cidr(self) -> int:
        return pulumi.get(self, "netmask_cidr")


@pulumi.output_type
class InstanceAddOn(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 quantity: Optional[int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def quantity(self) -> Optional[int]:
        return pulumi.get(self, "quantity")


@pulumi.output_type
class InstanceAdditionalIp(dict):
    def __init__(__self__, *,
                 v4s: Optional[Sequence['outputs.InstanceAdditionalIpV4']] = None):
        if v4s is not None:
            pulumi.set(__self__, "v4s", v4s)

    @property
    @pulumi.getter
    def v4s(self) -> Optional[Sequence['outputs.InstanceAdditionalIpV4']]:
        return pulumi.get(self, "v4s")


@pulumi.output_type
class InstanceAdditionalIpV4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "netmaskCidr":
            suggest = "netmask_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceAdditionalIpV4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceAdditionalIpV4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceAdditionalIpV4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 ip: Optional[str] = None,
                 netmask_cidr: Optional[int] = None):
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask_cidr is not None:
            pulumi.set(__self__, "netmask_cidr", netmask_cidr)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="netmaskCidr")
    def netmask_cidr(self) -> Optional[int]:
        return pulumi.get(self, "netmask_cidr")


@pulumi.output_type
class InstanceIpConfig(dict):
    def __init__(__self__, *,
                 v4s: Optional[Sequence['outputs.InstanceIpConfigV4']] = None,
                 v6s: Optional[Sequence['outputs.InstanceIpConfigV6']] = None):
        if v4s is not None:
            pulumi.set(__self__, "v4s", v4s)
        if v6s is not None:
            pulumi.set(__self__, "v6s", v6s)

    @property
    @pulumi.getter
    def v4s(self) -> Optional[Sequence['outputs.InstanceIpConfigV4']]:
        return pulumi.get(self, "v4s")

    @property
    @pulumi.getter
    def v6s(self) -> Optional[Sequence['outputs.InstanceIpConfigV6']]:
        return pulumi.get(self, "v6s")


@pulumi.output_type
class InstanceIpConfigV4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "netmaskCidr":
            suggest = "netmask_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceIpConfigV4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceIpConfigV4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceIpConfigV4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 ip: Optional[str] = None,
                 netmask_cidr: Optional[int] = None):
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask_cidr is not None:
            pulumi.set(__self__, "netmask_cidr", netmask_cidr)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="netmaskCidr")
    def netmask_cidr(self) -> Optional[int]:
        return pulumi.get(self, "netmask_cidr")


@pulumi.output_type
class InstanceIpConfigV6(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "netmaskCidr":
            suggest = "netmask_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceIpConfigV6. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceIpConfigV6.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceIpConfigV6.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 ip: Optional[str] = None,
                 netmask_cidr: Optional[int] = None):
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask_cidr is not None:
            pulumi.set(__self__, "netmask_cidr", netmask_cidr)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="netmaskCidr")
    def netmask_cidr(self) -> Optional[int]:
        return pulumi.get(self, "netmask_cidr")


@pulumi.output_type
class Object_storageAutoScaling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorMessage":
            suggest = "error_message"
        elif key == "sizeLimitTb":
            suggest = "size_limit_tb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Object_storageAutoScaling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Object_storageAutoScaling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Object_storageAutoScaling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_message: Optional[str] = None,
                 size_limit_tb: Optional[float] = None,
                 state: Optional[str] = None):
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if size_limit_tb is not None:
            pulumi.set(__self__, "size_limit_tb", size_limit_tb)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="sizeLimitTb")
    def size_limit_tb(self) -> Optional[float]:
        return pulumi.get(self, "size_limit_tb")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class Private_networkInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "privateIpConfigs":
            suggest = "private_ip_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Private_networkInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Private_networkInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Private_networkInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[str] = None,
                 error_message: Optional[str] = None,
                 instance_id: Optional[int] = None,
                 name: Optional[str] = None,
                 private_ip_configs: Optional[Sequence['outputs.Private_networkInstancePrivateIpConfig']] = None,
                 status: Optional[str] = None):
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip_configs is not None:
            pulumi.set(__self__, "private_ip_configs", private_ip_configs)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[str]:
        return pulumi.get(self, "error_message")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[int]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateIpConfigs")
    def private_ip_configs(self) -> Optional[Sequence['outputs.Private_networkInstancePrivateIpConfig']]:
        return pulumi.get(self, "private_ip_configs")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class Private_networkInstancePrivateIpConfig(dict):
    def __init__(__self__, *,
                 v4s: Optional[Sequence['outputs.Private_networkInstancePrivateIpConfigV4']] = None):
        if v4s is not None:
            pulumi.set(__self__, "v4s", v4s)

    @property
    @pulumi.getter
    def v4s(self) -> Optional[Sequence['outputs.Private_networkInstancePrivateIpConfigV4']]:
        return pulumi.get(self, "v4s")


@pulumi.output_type
class Private_networkInstancePrivateIpConfigV4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "netmaskCidr":
            suggest = "netmask_cidr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Private_networkInstancePrivateIpConfigV4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Private_networkInstancePrivateIpConfigV4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Private_networkInstancePrivateIpConfigV4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gateway: Optional[str] = None,
                 ip: Optional[str] = None,
                 netmask_cidr: Optional[int] = None):
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if netmask_cidr is not None:
            pulumi.set(__self__, "netmask_cidr", netmask_cidr)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[str]:
        return pulumi.get(self, "gateway")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="netmaskCidr")
    def netmask_cidr(self) -> Optional[int]:
        return pulumi.get(self, "netmask_cidr")


