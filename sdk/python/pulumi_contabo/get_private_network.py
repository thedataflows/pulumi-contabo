# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetPrivateNetworkResult',
    'AwaitableGetPrivateNetworkResult',
    'get_private_network',
    'get_private_network_output',
]

@pulumi.output_type
class GetPrivateNetworkResult:
    """
    A collection of values returned by getPrivateNetwork.
    """
    def __init__(__self__, available_ips=None, cidr=None, created_date=None, data_center=None, description=None, id=None, instance_ids=None, instances=None, name=None, region=None, region_name=None, updated_at=None):
        if available_ips and not isinstance(available_ips, int):
            raise TypeError("Expected argument 'available_ips' to be a int")
        pulumi.set(__self__, "available_ips", available_ips)
        if cidr and not isinstance(cidr, str):
            raise TypeError("Expected argument 'cidr' to be a str")
        pulumi.set(__self__, "cidr", cidr)
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        pulumi.set(__self__, "created_date", created_date)
        if data_center and not isinstance(data_center, str):
            raise TypeError("Expected argument 'data_center' to be a str")
        pulumi.set(__self__, "data_center", data_center)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_ids and not isinstance(instance_ids, list):
            raise TypeError("Expected argument 'instance_ids' to be a list")
        pulumi.set(__self__, "instance_ids", instance_ids)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if region_name and not isinstance(region_name, str):
            raise TypeError("Expected argument 'region_name' to be a str")
        pulumi.set(__self__, "region_name", region_name)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="availableIps")
    def available_ips(self) -> int:
        return pulumi.get(self, "available_ips")

    @property
    @pulumi.getter
    def cidr(self) -> str:
        return pulumi.get(self, "cidr")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter(name="dataCenter")
    def data_center(self) -> str:
        return pulumi.get(self, "data_center")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetPrivateNetworkInstanceResult']:
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


class AwaitableGetPrivateNetworkResult(GetPrivateNetworkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrivateNetworkResult(
            available_ips=self.available_ips,
            cidr=self.cidr,
            created_date=self.created_date,
            data_center=self.data_center,
            description=self.description,
            id=self.id,
            instance_ids=self.instance_ids,
            instances=self.instances,
            name=self.name,
            region=self.region,
            region_name=self.region_name,
            updated_at=self.updated_at)


def get_private_network(created_date: Optional[str] = None,
                        description: Optional[str] = None,
                        instance_ids: Optional[Sequence[int]] = None,
                        name: Optional[str] = None,
                        region: Optional[str] = None,
                        region_name: Optional[str] = None,
                        updated_at: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrivateNetworkResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['createdDate'] = created_date
    __args__['description'] = description
    __args__['instanceIds'] = instance_ids
    __args__['name'] = name
    __args__['region'] = region
    __args__['regionName'] = region_name
    __args__['updatedAt'] = updated_at
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('contabo:index/getPrivateNetwork:getPrivateNetwork', __args__, opts=opts, typ=GetPrivateNetworkResult).value

    return AwaitableGetPrivateNetworkResult(
        available_ips=__ret__.available_ips,
        cidr=__ret__.cidr,
        created_date=__ret__.created_date,
        data_center=__ret__.data_center,
        description=__ret__.description,
        id=__ret__.id,
        instance_ids=__ret__.instance_ids,
        instances=__ret__.instances,
        name=__ret__.name,
        region=__ret__.region,
        region_name=__ret__.region_name,
        updated_at=__ret__.updated_at)


@_utilities.lift_output_func(get_private_network)
def get_private_network_output(created_date: Optional[pulumi.Input[Optional[str]]] = None,
                               description: Optional[pulumi.Input[Optional[str]]] = None,
                               instance_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                               name: Optional[pulumi.Input[Optional[str]]] = None,
                               region: Optional[pulumi.Input[Optional[str]]] = None,
                               region_name: Optional[pulumi.Input[Optional[str]]] = None,
                               updated_at: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPrivateNetworkResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
