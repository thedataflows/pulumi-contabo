# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetInstanceSnapshotResult',
    'AwaitableGetInstanceSnapshotResult',
    'get_instance_snapshot',
    'get_instance_snapshot_output',
]

@pulumi.output_type
class GetInstanceSnapshotResult:
    """
    A collection of values returned by getInstanceSnapshot.
    """
    def __init__(__self__, auto_delete_date=None, created_date=None, description=None, id=None, image_id=None, image_name=None, instance_id=None, name=None):
        if auto_delete_date and not isinstance(auto_delete_date, str):
            raise TypeError("Expected argument 'auto_delete_date' to be a str")
        pulumi.set(__self__, "auto_delete_date", auto_delete_date)
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        pulumi.set(__self__, "created_date", created_date)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_id and not isinstance(image_id, str):
            raise TypeError("Expected argument 'image_id' to be a str")
        pulumi.set(__self__, "image_id", image_id)
        if image_name and not isinstance(image_name, str):
            raise TypeError("Expected argument 'image_name' to be a str")
        pulumi.set(__self__, "image_name", image_name)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="autoDeleteDate")
    def auto_delete_date(self) -> str:
        return pulumi.get(self, "auto_delete_date")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


class AwaitableGetInstanceSnapshotResult(GetInstanceSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceSnapshotResult(
            auto_delete_date=self.auto_delete_date,
            created_date=self.created_date,
            description=self.description,
            id=self.id,
            image_id=self.image_id,
            image_name=self.image_name,
            instance_id=self.instance_id,
            name=self.name)


def get_instance_snapshot(description: Optional[str] = None,
                          id: Optional[str] = None,
                          instance_id: Optional[str] = None,
                          name: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceSnapshotResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['id'] = id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('contabo:index/getInstanceSnapshot:getInstanceSnapshot', __args__, opts=opts, typ=GetInstanceSnapshotResult).value

    return AwaitableGetInstanceSnapshotResult(
        auto_delete_date=__ret__.auto_delete_date,
        created_date=__ret__.created_date,
        description=__ret__.description,
        id=__ret__.id,
        image_id=__ret__.image_id,
        image_name=__ret__.image_name,
        instance_id=__ret__.instance_id,
        name=__ret__.name)


@_utilities.lift_output_func(get_instance_snapshot)
def get_instance_snapshot_output(description: Optional[pulumi.Input[Optional[str]]] = None,
                                 id: Optional[pulumi.Input[str]] = None,
                                 instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 name: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceSnapshotResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
